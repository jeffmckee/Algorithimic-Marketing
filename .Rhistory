knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(data.table)
library(glmnet)
df <- read.csv("bank_additional_full.csv")
#
# #Generate dummy variables
# for(level in unique(df$job)){
#   df[paste("job", level, sep = "_")] <- ifelse(df$job == level, 1, 0)
# }
#
# for(level in unique(df$marital)){
#   df[paste("marital", level, sep = "_")] <- ifelse(df$marital == level, 1, 0)
# }
#
# for(level in unique(df$education)){
#   df[paste("education", level, sep = "_")] <- ifelse(df$education == level, 1, 0)
# }
#
# df$default_yes <- ifelse(df$default == "yes", 1, 0)
#
# df$housing_yes <- ifelse(df$housing == "yes", 1, 0)
#
# df$loan_yes <- ifelse(df$loan == "yes", 1, 0)
#
# for(level in unique(df$contact)){
#   df[paste("contact", level, sep = "_")] <- ifelse(df$contact == level, 1, 0)
# }
#
# for(level in unique(df$month)){
#   df[paste("month", level, sep = "_")] <- ifelse(df$month == level, 1, 0)
# }
#
# for(level in unique(df$poutcome)){
#   df[paste("poutcome", level, sep = "_")] <- ifelse(df$poutcome == level, 1, 0)
# }
#
# df$Class <- ifelse(df$y=="true",TRUE,FALSE)
#
# #Remove unwanted columns
# df$X <- NULL
# df$job <- NULL
# df$marital <- NULL
# df$education <- NULL
# df$default <- NULL
# df$housing <- NULL
# df$loan <- NULL
# df$contact <- NULL
# df$month <- NULL
# df$poutcome <- NULL
# df$y <- NULL
#
# df$Class <- as.factor((df$Class))
# colnames(df)[11] <- "job_blue_collar"
# colnames(df)[14] <- "job_admin"
# colnames(df)[16] <- "job_self_employeed"
df <- as.data.table(model.matrix(~.-1,df))
colnames(df)[colnames(df)=="ytrue"] <- "outcome"
summary(df)
str(df)
table(df$campaign)
barplot(table(df$outcome,df$campaign)[2,1:15]/(table(df$outcome,df$campaign)[1,1:15]+table(df$outcome,df$campaign)[2,1:15]))
df[,ID := .I]
full_df <- df[rep(1:.N,campaign)][,campaign_no:=1:.N,by=ID]
full_df[campaign != campaign_no,'outcome'] <- 0
full_df[,campaign2 := ifelse(campaign_no == 2, 1,0)]
full_df[,campaign3 := ifelse(campaign_no == 3, 1,0)]
full_df[,campaign4 := ifelse(campaign_no == 4, 1,0)]
full_df[,campaign5 := ifelse(campaign_no == 5, 1,0)]
model_df<-full_df[campaign_no<=5,c(55,1:23,58:61)]
test_reg <- glm(outcome~.+.*campaign2+.*campaign3+.*campaign4+.*campaign5,data=model_df,family="binomial")
summary(test_reg)
#continue to build out model
#From final model: Pull out coefficients (this will be input for prediction/targeting)
test_reg_coef <-coef(test_reg)
df_test <- data.table(df_test)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(data.table)
library(glmnet)
df <- read.csv("bank_additional_full.csv")
#
# #Generate dummy variables
# for(level in unique(df$job)){
#   df[paste("job", level, sep = "_")] <- ifelse(df$job == level, 1, 0)
# }
#
# for(level in unique(df$marital)){
#   df[paste("marital", level, sep = "_")] <- ifelse(df$marital == level, 1, 0)
# }
#
# for(level in unique(df$education)){
#   df[paste("education", level, sep = "_")] <- ifelse(df$education == level, 1, 0)
# }
#
# df$default_yes <- ifelse(df$default == "yes", 1, 0)
#
# df$housing_yes <- ifelse(df$housing == "yes", 1, 0)
#
# df$loan_yes <- ifelse(df$loan == "yes", 1, 0)
#
# for(level in unique(df$contact)){
#   df[paste("contact", level, sep = "_")] <- ifelse(df$contact == level, 1, 0)
# }
#
# for(level in unique(df$month)){
#   df[paste("month", level, sep = "_")] <- ifelse(df$month == level, 1, 0)
# }
#
# for(level in unique(df$poutcome)){
#   df[paste("poutcome", level, sep = "_")] <- ifelse(df$poutcome == level, 1, 0)
# }
#
#
# #Remove unwanted columns
# df$X <- NULL
# df$job <- NULL
# df$marital <- NULL
# df$education <- NULL
# df$default <- NULL
# df$housing <- NULL
# df$loan <- NULL
# df$contact <- NULL
# df$month <- NULL
# df$poutcome <- NULL
# df$y <- NULL
#
# df$Class <- as.factor((df$Class))
# colnames(df)[11] <- "job_blue_collar"
# colnames(df)[14] <- "job_admin"
# colnames(df)[16] <- "job_self_employeed"
df <- as.data.table(model.matrix(~.-1,df))
# colnames(df)[colnames(df)=="ytrue"] <- "outcome"
df$Class <- ifelse(df$y=="true",TRUE,FALSE)
summary(df)
str(df)
table(df$campaign)
barplot(table(df$Class,df$campaign)[2,1:15]/(table(df$Class,df$campaign)[1,1:15]+table(df$Class,df$campaign)[2,1:15]))
df
barplot(table(df$Class,df$campaign)[2,1:15]/(table(df$Class,df$campaign)[1,1:15]+table(df$Class,df$campaign)[2,1:15]))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(data.table)
library(glmnet)
df <- read.csv("bank_additional_full.csv")
#
# #Generate dummy variables
# for(level in unique(df$job)){
#   df[paste("job", level, sep = "_")] <- ifelse(df$job == level, 1, 0)
# }
#
# for(level in unique(df$marital)){
#   df[paste("marital", level, sep = "_")] <- ifelse(df$marital == level, 1, 0)
# }
#
# for(level in unique(df$education)){
#   df[paste("education", level, sep = "_")] <- ifelse(df$education == level, 1, 0)
# }
#
# df$default_yes <- ifelse(df$default == "yes", 1, 0)
#
# df$housing_yes <- ifelse(df$housing == "yes", 1, 0)
#
# df$loan_yes <- ifelse(df$loan == "yes", 1, 0)
#
# for(level in unique(df$contact)){
#   df[paste("contact", level, sep = "_")] <- ifelse(df$contact == level, 1, 0)
# }
#
# for(level in unique(df$month)){
#   df[paste("month", level, sep = "_")] <- ifelse(df$month == level, 1, 0)
# }
#
# for(level in unique(df$poutcome)){
#   df[paste("poutcome", level, sep = "_")] <- ifelse(df$poutcome == level, 1, 0)
# }
#
#
# #Remove unwanted columns
# df$X <- NULL
# df$job <- NULL
# df$marital <- NULL
# df$education <- NULL
# df$default <- NULL
# df$housing <- NULL
# df$loan <- NULL
# df$contact <- NULL
# df$month <- NULL
# df$poutcome <- NULL
# df$y <- NULL
#
# df$Class <- as.factor((df$Class))
# colnames(df)[11] <- "job_blue_collar"
# colnames(df)[14] <- "job_admin"
# colnames(df)[16] <- "job_self_employeed"
df <- as.data.table(model.matrix(~.-1,df))
# colnames(df)[colnames(df)=="ytrue"] <- "outcome"
df$Class <- ifelse(df$y=="true",TRUE,FALSE)
#
# summary(df)
# str(df)
# table(df$campaign)
#
# barplot(table(df$Class,df$campaign)[2,1:15]/(table(df$Class,df$campaign)[1,1:15]+table(df$Class,df$campaign)[2,1:15]))
# #Splitting
# set.seed(1)
# training_size <- floor(0.80 * nrow(df))
# train_ind <- sample(seq_len(nrow(df)), size = training_size)
# df_train <- df[train_ind, ]
# df_test <- df[-train_ind, ]
# reg <- glm(outcome~.-duration, family="binomial", data=df_train)
# summary(reg)
# pred_test <- ifelse(predict(reg, df_test, type="response")>0.5,TRUE,FALSE)
# confusionMatrix(pred_test,df_test$Class)
# pred_test1 <- predict(reg, df_test, type="response")
# test1_index <- sort(pred_test1, index.return=TRUE, decreasing=TRUE)$ix[1:100]
# pred_test1tf <- ifelse(pred_test1[test1_index]>0.5,TRUE,FALSE)
# confusionMatrix(pred_test1tf,df_test$Class[test1_index])
# pred_test2 <- predict(reg, df_test, type="response")
# num_true_pred2 <- sum(sort(pred_test2, index.return=TRUE, decreasing=TRUE)$x>0.5)
# test2_index <- sort(pred_test2, index.return=TRUE, decreasing=TRUE)$ix[1:num_true_pred2]
# pred_test2tf <- ifelse(pred_test2[test2_index]>0.5,TRUE,FALSE)
# confusionMatrix(pred_test2tf,df_test$Class[test2_index])
df[,ID := .I]
full_df <- df[rep(1:.N,campaign)][,campaign_no:=1:.N,by=ID]
full_df[campaign != campaign_no,'Class'] <- FALSE
full_df[,campaign2 := ifelse(campaign_no == 2, 1,0)]
full_df[,campaign3 := ifelse(campaign_no == 3, 1,0)]
full_df[,campaign4 := ifelse(campaign_no == 4, 1,0)]
full_df[,campaign5 := ifelse(campaign_no == 5, 1,0)]
model_df<-full_df[campaign_no<=5,c(55,1:23,58:61)]
df
df[,ID := .I]
full_df <- df[rep(1:.N,campaign)][,campaign_no:=1:.N,by=ID]
full_df[campaign != campaign_no,'Class'] <- FALSE
full_df[,campaign2 := ifelse(campaign_no == 2, 1,0)]
full_df[,campaign3 := ifelse(campaign_no == 3, 1,0)]
full_df[,campaign4 := ifelse(campaign_no == 4, 1,0)]
full_df[,campaign5 := ifelse(campaign_no == 5, 1,0)]
full_df
str(full_df)
df[,ID := .I]
full_df <- df[rep(1:.N,campaign)][,campaign_no:=1:.N,by=ID]
full_df[campaign != campaign_no,'Class'] <- FALSE
full_df[,campaign2 := ifelse(campaign_no == 2, 1,0)]
full_df[,campaign3 := ifelse(campaign_no == 3, 1,0)]
full_df[,campaign4 := ifelse(campaign_no == 4, 1,0)]
full_df[,campaign5 := ifelse(campaign_no == 5, 1,0)]
model_df<-full_df[campaign_no<=5,c(56,1:23,59:62)]
model_df
test_reg <- glm(Class~.+.*campaign2+.*campaign3+.*campaign4+.*campaign5,data=model_df,family="binomial")
summary(test_reg)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(data.table)
library(glmnet)
log_prob <- function(pred){
1/(1+exp(-pred))
}
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(data.table)
df <- read.csv("bank_additional_full.csv")
#Generate dummy variables
for(level in unique(df$job)){
df[paste("job", level, sep = "_")] <- ifelse(df$job == level, 1, 0)
}
for(level in unique(df$marital)){
df[paste("marital", level, sep = "_")] <- ifelse(df$marital == level, 1, 0)
}
for(level in unique(df$education)){
df[paste("education", level, sep = "_")] <- ifelse(df$education == level, 1, 0)
}
df$default_yes <- ifelse(df$default == "yes", 1, 0)
df$housing_yes <- ifelse(df$housing == "yes", 1, 0)
df$loan_yes <- ifelse(df$loan == "yes", 1, 0)
for(level in unique(df$contact)){
df[paste("contact", level, sep = "_")] <- ifelse(df$contact == level, 1, 0)
}
for(level in unique(df$month)){
df[paste("month", level, sep = "_")] <- ifelse(df$month == level, 1, 0)
}
for(level in unique(df$poutcome)){
df[paste("poutcome", level, sep = "_")] <- ifelse(df$poutcome == level, 1, 0)
}
df$Class <- ifelse(df$y=="yes",TRUE,FALSE)
#Remove unwanted columns
df$X <- NULL
df$job <- NULL
df$marital <- NULL
df$education <- NULL
df$default <- NULL
df$housing <- NULL
df$loan <- NULL
df$contact <- NULL
df$month <- NULL
df$poutcome <- NULL
df$y <- NULL
df$Class <- as.factor((df$Class))
colnames(df)[11] <- "job_blue_collar"
colnames(df)[14] <- "job_admin"
colnames(df)[16] <- "job_self_employeed"
summary(df)
str(df)
table(df$campaign)
barplot(table(df$Class,df$campaign)[2,1:15]/(table(df$Class,df$campaign)[1,1:15]+table(df$Class,df$campaign)[2,1:15]))
#Splitting
set.seed(1)
training_size <- floor(0.80 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = training_size)
df_train <- df[train_ind, ]
df_test <- df[-train_ind, ]
reg <- glm(Class~.-duration, family="binomial", data=df_train)
summary(reg)
knitr::opts_chunk$set(echo = TRUE)
demand_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/demand.csv")
summary(demand_data)
attach(demand_data)
log_q <-log(Quantity)
log_p<-log(Price)
simple_reg <-lm(log_q~log_p)
summary(simple_reg)
demand_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/demand.csv")
#summary(demand_data)
attach(demand_data)
log_q <-log(Quantity)
log_p<-log(Price)
simple_reg <-lm(log_q~log_p)
summary(simple_reg)
reg_1<-lm(log(Quantity)~log(Price),data=demand_data)
summary(reg_1)
exp(reg_1$coefficients[1])
reg_1$coefficients[1]
View(demand_data)
View(demand_data)
max(Price)
plot(x=Quantity,y=Price)
plot(x=log(Quantity),y=log(Price))
conjoint_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/conjoint.csv")
#step 1 - run regressions for each group
a<-as.data.frame(matrix(ncol=12, nrow=0))
colnames(a)<-c("intercept","NBC","CBS","ABC","HBO","STARZ","CNN","ESPN","Samsung","LG","Price","size")
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
}
#step 2 -->normalize regression results
price_table <-(a/a$Price)*-1
price_table$size<-a$size
price_table
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
summary(conjoint_seg_model)
}
conjoint_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/conjoint.csv")
#step 1 - run regressions for each group
a<-as.data.frame(matrix(ncol=12, nrow=0))
colnames(a)<-c("intercept","NBC","CBS","ABC","HBO","STARZ","CNN","ESPN","Samsung","LG","Price","size")
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
print(summary(conjoint_seg_model))
}
#step 2 -->normalize regression results
price_table <-(a/a$Price)*-1
price_table$size<-a$size
price_table
conjoint_seg_model$residuals
conjoint_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/conjoint.csv")
#step 1 - run regressions for each group
a<-as.data.frame(matrix(ncol=12, nrow=0))
colnames(a)<-c("intercept","NBC","CBS","ABC","HBO","STARZ","CNN","ESPN","Samsung","LG","Price","size")
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
print(conjoint_seg_model)
}
#step 2 -->normalize regression results
price_table <-(a/a$Price)*-1
price_table$size<-a$size
price_table
conjoint_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/conjoint.csv")
#step 1 - run regressions for each group
a<-as.data.frame(matrix(ncol=12, nrow=0))
colnames(a)<-c("intercept","NBC","CBS","ABC","HBO","STARZ","CNN","ESPN","Samsung","LG","Price","size")
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
summary(conjoint_seg_model)
}
#step 2 -->normalize regression results
price_table <-(a/a$Price)*-1
price_table$size<-a$size
price_table
conjoint_data <-read.csv("C:/Users/jacob/Google Drive (bennettja@chicagobooth.edu)/2019 - Winter/Pricing Strategies/Final/conjoint.csv")
#step 1 - run regressions for each group
a<-as.data.frame(matrix(ncol=12, nrow=0))
colnames(a)<-c("intercept","NBC","CBS","ABC","HBO","STARZ","CNN","ESPN","Samsung","LG","Price","size")
for(i in 1:3)  {
dat <-conjoint_data[conjoint_data$segment==i,]
conjoint_seg_model <-lm(Rating~NBC+CBS+ABC+HBO+STARZ+CNN+ESPN+Samsung+LG+Price,data=dat)
a[i,]<-c(conjoint_seg_model$coefficients,nrow(dat)/15)
print(summary(conjoint_seg_model))
}
#step 2 -->normalize regression results
price_table <-(a/a$Price)*-1
price_table$size<-a$size
price_table
