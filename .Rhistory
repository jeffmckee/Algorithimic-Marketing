sample_person$campaign4<-1
prob[4] <-log_prob(predict(test_reg,sample_person))
sample_person$campaign4<-0
sample_person$campaign5<-1
prob[5] <-log_prob(predict(test_reg,sample_person))
sample_person$campaign5<-0
#For Calls 1 through N, compute likelihood of success by the nth call: p_sub(n)
p_sub<-rep(NA,5)
p_sub[1]<-prob[1]
for (i in 2:5) {
p_sub[i] <-p_sub[i-1]+prob[i]*(1-p_sub[i-1])
}
#For calls 1 through N, compute lift of call n: lift(n)= p_sub(n) - p_sub(n-1) (this represents unconditional probability of success on call n)
lift<-rep(NA,5)
lift[1]<-p_sub[1]
for (i in 2:5) {
lift[i] <-p_sub[i]-p_sub[i-1]
}
#Compute number of calls to target for a given customer (N.B.: As long as probability of success is declining monotonically, as soon as the nth call is not profitable, the (n+1)th call will also not be profitable.)
#Test: Identify whether the nth call (if made) would be profitable. THis is simple:
#Profit(n|All calls prior="no")=[Profit of Success]*p_sub(n) -[Cost of Failure]*(1-p_sub(n))
Profit <- rep(NA,5)
for (i in 1:5){
Profit[i] <- Success_profit*prob[i]-fail_cost*(1-prob[i])
}
#Decision: for the first unprofitable call "A," choose  A-1 as the target number of calls.
Calls_to_make<-0
Calls_to_make <-NROW(Profit[Profit>0])
#based out this decision (target customer with A-1 calls), also compute
#(1) the expected number of calls with that rule(this is not simply A-1 b/c customer may sign up earlier), and
Expected_calls <- 0
if(Calls_to_make<=1) {
Expected_calls<-Calls_to_make
}  else {
for (i in 1:(Calls_to_make-1)){
Expected_calls<-Expected_calls+i*lift[i]
}
Expected_calls<-Expected_calls+Calls_to_make*(1-p_sub[Calls_to_make-1])
}
#(2) the expected profit from this strategy (weighted average of profitabilities forscenarios given this targeting plan, weighting each scenario by lift(n) and then adding together)
Expected_profit <- 0
if (Calls_to_make>0){
for (i in 1:Calls_to_make){
Expected_profit <-Expected_profit+lift[i]*(Success_profit-fail_cost*(i-1))
}
Expected_profit <-Expected_profit-fail_cost*Calls_to_make*(1-p_sub[Calls_to_make])
}
Metrics <-c("Euribor","Max Calls","Expected Calls", "Profit")
values<-c(Market_rate,Calls_to_make,Expected_calls,Expected_profit)
results <-data.frame(Metrics,values)
#  print(results)
return_frame <- data.frame(max_calls = Calls_to_make, p1 = prob[1], p2 = prob[2], p3 = prob[3], p4 = prob[4], p5 = prob[5])
return(return_frame)
}
#Generate estimates of cost per call, benefit (revenue/profit) of time deposit product for bank
#Cost- Relevant inputs: hourly wage, average call information (separate averages for failures and successes          b/c they have drastically different lengths)
Compute_Sample_Profitability_LASSO<-function(obs,model){
sample_person <-df_test[obs]
#Loops through prediction turning on campaigns to calculate probabilities of success on calls 1:5
prob <-rep(NA,5)
sample_person$campaign2<-0
sample_person$campaign3<-0
sample_person$campaign4<-0
sample_person$campaign5<-0
lasso_test<-sample_person[,c(56,1:30,47:49, 58:61)]
test_matrix <- model.matrix(Class~.*(campaign2+campaign3+campaign4+campaign5)-campaign2*(campaign3+campaign4+campaign5)-campaign3*(campaign4+campaign5)-campaign4*campaign5+campaign2+campaign3+campaign4+campaign5-1,data=lasso_test)
prob[1] <-log_prob(predict(model,newx=test_matrix,s=model$lambda.min))
sample_person$campaign2<-1
lasso_test<-sample_person[,c(56,1:30,47:49, 58:61)]
test_matrix <- model.matrix(Class~.*(campaign2+campaign3+campaign4+campaign5)-campaign2*(campaign3+campaign4+campaign5)-campaign3*(campaign4+campaign5)-campaign4*campaign5+campaign2+campaign3+campaign4+campaign5-1,data=lasso_test)
prob[2] <-log_prob(predict(model,newx=test_matrix,s=model$lambda.min))
sample_person$campaign2<-0
sample_person$campaign3<-1
lasso_test<-sample_person[,c(56,1:30,47:49, 58:61)]
test_matrix <- model.matrix(Class~.*(campaign2+campaign3+campaign4+campaign5)-campaign2*(campaign3+campaign4+campaign5)-campaign3*(campaign4+campaign5)-campaign4*campaign5+campaign2+campaign3+campaign4+campaign5-1,data=lasso_test)
prob[3] <-log_prob(predict(model,newx=test_matrix,s=model$lambda.min))
sample_person$campaign3<-0
sample_person$campaign4<-1
lasso_test<-sample_person[,c(56,1:30,47:49, 58:61)]
test_matrix <- model.matrix(Class~.*(campaign2+campaign3+campaign4+campaign5)-campaign2*(campaign3+campaign4+campaign5)-campaign3*(campaign4+campaign5)-campaign4*campaign5+campaign2+campaign3+campaign4+campaign5-1,data=lasso_test)
prob[4] <-log_prob(predict(model,newx=test_matrix,s=model$lambda.min))
sample_person$campaign4<-0
sample_person$campaign5<-1
lasso_test<-sample_person[,c(56,1:30,47:49, 58:61)]
test_matrix <- model.matrix(Class~.*(campaign2+campaign3+campaign4+campaign5)-campaign2*(campaign3+campaign4+campaign5)-campaign3*(campaign4+campaign5)-campaign4*campaign5+campaign2+campaign3+campaign4+campaign5-1,data=lasso_test)
prob[5] <-log_prob(predict(model,newx=test_matrix,s=model$lambda.min))
#For Calls 1 through N, compute likelihood of success by the nth call: p_sub(n)
p_sub<-rep(NA,5)
p_sub[1]<-prob[1]
for (i in 2:5) {
p_sub[i] <-p_sub[i-1]+prob[i]*(1-p_sub[i-1])
}
#For calls 1 through N, compute lift of call n: lift(n)= p_sub(n) - p_sub(n-1) (this represents unconditional probability of success on call n)
lift<-rep(NA,5)
lift[1]<-p_sub[1]
for (i in 2:5) {
lift[i] <-p_sub[i]-p_sub[i-1]
}
#Compute number of calls to target for a given customer (N.B.: As long as probability of success is declining monotonically, as soon as the nth call is not profitable, the (n+1)th call will also not be profitable.)
#Test: Identify whether the nth call (if made) would be profitable. THis is simple:
#Profit(n|All calls prior="no")=[Profit of Success]*p_sub(n) -[Cost of Failure]*(1-p_sub(n))
Profit <- rep(NA,5)
for (i in 1:5){
Profit[i] <- Success_profit*prob[i]-fail_cost*(1-prob[i])
}
#Decision: for the first unprofitable call "A," choose  A-1 as the target number of calls.
Calls_to_make<-0
Calls_to_make <-NROW(Profit[Profit>0])
#based out this decision (target customer with A-1 calls), also compute
#(1) the expected number of calls with that rule(this is not simply A-1 b/c customer may sign up earlier), and
Expected_calls <- 0
if(Calls_to_make<=1) {
Expected_calls<-Calls_to_make
}  else {
for (i in 1:(Calls_to_make-1)){
Expected_calls<-Expected_calls+i*lift[i]
}
Expected_calls<-Expected_calls+Calls_to_make*(1-p_sub[Calls_to_make-1])
}
#(2) the expected profit from this strategy (weighted average of profitabilities forscenarios given this targeting plan, weighting each scenario by lift(n) and then adding together)
Expected_profit <- 0
if (Calls_to_make>0){
for (i in 1:Calls_to_make){
Expected_profit <-Expected_profit+lift[i]*(Success_profit-fail_cost*(i-1))
}
Expected_profit <-Expected_profit-fail_cost*Calls_to_make*(1-p_sub[Calls_to_make])
}
Metrics <-c("Euribor","Max Calls","Expected Calls", "Profit")
values<-c(Market_rate,Calls_to_make,Expected_calls,Expected_profit)
results <-data.frame(Metrics,values)
#  print(results)
return_frame <- data.frame(max_calls = Calls_to_make, p1 = prob[1], p2 = prob[2], p3 = prob[3], p4 = prob[4], p5 = prob[5])
return(return_frame)
}
#Generate estimates of cost per call, benefit (revenue/profit) of time deposit product for bank
#Cost- Relevant inputs: hourly wage, average call information (separate averages for failures and successes          b/c they have drastically different lengths)
sample_tree <-df_test
#Loops through prediction turning on campaigns to calculate probabilities of success on calls 1:5
#prob <-rep(NA,nrow(sample_tree),5)
sample_tree$campaign2<-0
sample_tree$campaign3<-0
sample_tree$campaign4<-0
sample_tree$campaign5<-0
tree_test<-sample_tree[,c(56,1:30,47:49, 58:61)]
prob1_tree <- predict(fit1,newdata=tree_test,type="prob")[,2]
tree_test$campaign2<-1
prob2_tree <- predict(fit1,newdata=tree_test,type="prob")[,2]
tree_test$campaign2<-0
tree_test$campaign3<-1
prob3_tree <- predict(fit1,newdata=tree_test,type="prob")[,2]
tree_test$campaign3<-0
tree_test$campaign4<-1
prob4_tree <- predict(fit1,newdata=tree_test,type="prob")[,2]
tree_test$campaign4<-0
tree_test$campaign5<-1
prob5_tree <- predict(fit1,newdata=tree_test,type="prob")[,2]
prob_tree<-cbind(prob1_tree,prob2_tree,prob3_tree,prob4_tree,prob5_tree)
#For Calls 1 through N, compute likelihood of success by the nth call: p_sub(n)
p_sub1_tree <- prob_tree[,1]
p_sub2_tree <- p_sub1_tree+prob_tree[,2]*(1-p_sub1_tree)
p_sub3_tree <- p_sub2_tree+prob_tree[,3]*(1-p_sub2_tree)
p_sub4_tree <- p_sub3_tree+prob_tree[,4]*(1-p_sub3_tree)
p_sub5_tree <- p_sub4_tree+prob_tree[,5]*(1-p_sub4_tree)
#For calls 1 through N, compute lift of call n: lift(n)= p_sub(n) - p_sub(n-1) (this represents unconditional probability of success on call n)
lift1_tree <- p_sub1_tree
lift2_tree <- p_sub2_tree-p_sub1_tree
lift3_tree <- p_sub3_tree-p_sub2_tree
lift4_tree <- p_sub4_tree-p_sub3_tree
lift5_tree <- p_sub5_tree-p_sub4_tree
#Compute number of calls to target for a given customer (N.B.: As long as probability of success is declining monotonically, as soon as the nth call is not profitable, the (n+1)th call will also not be profitable.)
#Test: Identify whether the nth call (if made) would be profitable. THis is simple:
#Profit(n|All calls prior="no")=[Profit of Success]*p_sub(n) -[Cost of Failure]*(1-p_sub(n))
profit1_tree <- Success_profit*prob1_tree - fail_cost*(1-prob1_tree)
profit2_tree <- Success_profit*prob2_tree - fail_cost*(1-prob2_tree)
profit3_tree <- Success_profit*prob3_tree - fail_cost*(1-prob3_tree)
profit4_tree <- Success_profit*prob4_tree - fail_cost*(1-prob4_tree)
profit5_tree <- Success_profit*prob5_tree - fail_cost*(1-prob5_tree)
profit_tree <- cbind(profit1_tree,profit2_tree,profit3_tree,profit4_tree,profit5_tree)
calls_to_make_tree <-rowSums(profit_tree>0)
success_calls_tree <- ifelse(calls_to_make_tree>=df_test$campaign & df_test$Class,df_test$campaign,0)
fail_calls_tree <- ifelse(calls_to_make_tree>=df_test$campaign,ifelse(!df_test$Class,df_test$campaign,df_test$campaign-1),calls_to_make_tree)
# Calls_to_make is the number of calls you plan to make with this strategy
# Success_calls is 0 if you don't call them OR call and don't make a sale; if you experience success on that call, it represents the call number on which you were successful
# Fail_calls
#Generate estimates of cost per call, benefit (revenue/profit) of time deposit product for bank
#Cost- Relevant inputs: hourly wage, average call information (separate averages for failures and successes          b/c they have drastically different lengths)
sample_tree <-df_test
#Loops through prediction turning on campaigns to calculate probabilities of success on calls 1:5
#prob <-rep(NA,nrow(sample_tree),5)
sample_tree$campaign2<-0
sample_tree$campaign3<-0
sample_tree$campaign4<-0
sample_tree$campaign5<-0
rf_test<-sample_tree[,c(56,1:30,47:49, 58:61)]
prob1_rf <- predict(fit2,newdata=rf_test,type="prob")[,2]
rf_test$campaign2<-1
prob2_rf <- predict(fit2,newdata=rf_test,type="prob")[,2]
rf_test$campaign2<-0
rf_test$campaign3<-1
prob3_rf <- predict(fit2,newdata=rf_test,type="prob")[,2]
rf_test$campaign3<-0
rf_test$campaign4<-1
prob4_rf <- predict(fit2,newdata=rf_test,type="prob")[,2]
rf_test$campaign4<-0
rf_test$campaign5<-1
prob5_rf <- predict(fit2,newdata=rf_test,type="prob")[,2]
prob_rf<-cbind(prob1_rf,prob2_rf,prob3_rf,prob4_rf,prob5_rf)
#For Calls 1 through N, compute likelihood of success by the nth call: p_sub(n)
p_sub1_rf <- prob_rf[,1]
p_sub2_rf <- p_sub1_rf+prob_rf[,2]*(1-p_sub1_rf)
p_sub3_rf <- p_sub2_rf+prob_rf[,3]*(1-p_sub2_rf)
p_sub4_rf <- p_sub3_rf+prob_rf[,4]*(1-p_sub3_rf)
p_sub5_rf <- p_sub4_rf+prob_rf[,5]*(1-p_sub4_rf)
#For calls 1 through N, compute lift of call n: lift(n)= p_sub(n) - p_sub(n-1) (this represents unconditional probability of success on call n)
lift1_rf <- p_sub1_rf
lift2_rf <- p_sub2_rf-p_sub1_rf
lift3_rf <- p_sub3_rf-p_sub2_rf
lift4_rf <- p_sub4_rf-p_sub3_rf
lift5_rf <- p_sub5_rf-p_sub4_rf
#Compute number of calls to target for a given customer (N.B.: As long as probability of success is declining monotonically, as soon as the nth call is not profitable, the (n+1)th call will also not be profitable.)
#Test: Identify whether the nth call (if made) would be profitable. THis is simple:
#Profit(n|All calls prior="no")=[Profit of Success]*p_sub(n) -[Cost of Failure]*(1-p_sub(n))
profit1_rf <- Success_profit*prob1_rf - fail_cost*(1-prob1_rf)
profit2_rf <- Success_profit*prob2_rf - fail_cost*(1-prob2_rf)
profit3_rf <- Success_profit*prob3_rf - fail_cost*(1-prob3_rf)
profit4_rf <- Success_profit*prob4_rf - fail_cost*(1-prob4_rf)
profit5_rf <- Success_profit*prob5_rf - fail_cost*(1-prob5_rf)
profit_rf <- cbind(profit1_rf,profit2_rf,profit3_rf,profit4_rf,profit5_rf)
calls_to_make_rf <-rowSums(profit_rf>0)
success_calls_rf <- ifelse(calls_to_make_rf>=df_test$campaign & df_test$Class,df_test$campaign,0)
fail_calls_rf <- ifelse(calls_to_make_rf>=df_test$campaign,ifelse(!df_test$Class,df_test$campaign,df_test$campaign-1),calls_to_make_rf)
# Calls_to_make is the number of calls you plan to make with this strategy
# Success_calls is 0 if you don't call them OR call and don't make a sale; if you experience success on that call, it represents the call number on which you were successful
# Fail_calls
#Generate estimates of cost per call, benefit (revenue/profit) of time deposit product for bank
#Cost- Relevant inputs: hourly wage, average call information (separate averages for failures and successes          b/c they have drastically different lengths)
sample_tree <- df_test
#Loops through prediction turning on campaigns to calculate probabilities of success on calls 1:5
#prob <-rep(NA,nrow(sample_tree),5)
sample_tree$campaign2<-0
sample_tree$campaign3<-0
sample_tree$campaign4<-0
sample_tree$campaign5<-0
gbm_test<-sample_tree[,c(56,1:30,47:49, 58:61)]
prob1_gbm <- log_prob(predict(fboost,newdata=gbm_test,n.trees=500))
gbm_test$campaign2<-1
prob2_gbm <- log_prob(predict(fboost,newdata=gbm_test,n.trees=500))
gbm_test$campaign2<-0
gbm_test$campaign3<-1
prob3_gbm <- log_prob(predict(fboost,newdata=gbm_test,n.trees=500))
gbm_test$campaign3<-0
gbm_test$campaign4<-1
prob4_gbm <- log_prob(predict(fboost,newdata=gbm_test,n.trees=500))
gbm_test$campaign4<-0
gbm_test$campaign5<-1
prob5_gbm <- log_prob(predict(fboost,newdata=gbm_test,n.trees=500))
prob_gbm <- cbind(prob1_gbm,prob2_gbm,prob3_gbm,prob4_gbm,prob5_gbm)
#For Calls 1 through N, compute likelihood of success by the nth call: p_sub(n)
p_sub1_gbm <- prob_gbm[,1]
p_sub2_gbm <- p_sub1_gbm+prob_gbm[,2]*(1-p_sub1_gbm)
p_sub3_gbm <- p_sub2_gbm+prob_gbm[,3]*(1-p_sub2_gbm)
p_sub4_gbm <- p_sub3_gbm+prob_gbm[,4]*(1-p_sub3_gbm)
p_sub5_gbm <- p_sub4_gbm+prob_gbm[,5]*(1-p_sub4_gbm)
#For calls 1 through N, compute lift of call n: lift(n)= p_sub(n) - p_sub(n-1) (this represents unconditional probability of success on call n)
lift1_gbm <- p_sub1_gbm
lift2_gbm <- p_sub2_gbm-p_sub1_gbm
lift3_gbm <- p_sub3_gbm-p_sub2_gbm
lift4_gbm <- p_sub4_gbm-p_sub3_gbm
lift5_gbm <- p_sub5_gbm-p_sub4_gbm
#Compute number of calls to target for a given customer (N.B.: As long as probability of success is declining monotonically, as soon as the nth call is not profitable, the (n+1)th call will also not be profitable.)
#Test: Identify whether the nth call (if made) would be profitable. THis is simple:
#Profit(n|All calls prior="no")=[Profit of Success]*p_sub(n) -[Cost of Failure]*(1-p_sub(n))
profit1_gbm <- Success_profit*prob1_gbm - fail_cost*(1-prob1_gbm)
profit2_gbm <- Success_profit*prob2_gbm - fail_cost*(1-prob2_gbm)
profit3_gbm <- Success_profit*prob3_gbm - fail_cost*(1-prob3_gbm)
profit4_gbm <- Success_profit*prob4_gbm - fail_cost*(1-prob4_gbm)
profit5_gbm <- Success_profit*prob5_gbm - fail_cost*(1-prob5_gbm)
profit_gbm <- cbind(profit1_gbm,profit2_gbm,profit3_gbm,profit4_gbm,profit5_gbm)
calls_to_make_gbm <-rowSums(profit_gbm>0)
success_calls_gbm <- ifelse(calls_to_make_gbm>=df_test$campaign & df_test$Class,df_test$campaign,0)
fail_calls_gbm <- ifelse(calls_to_make_gbm>=df_test$campaign,ifelse(!df_test$Class,df_test$campaign,df_test$campaign-1),calls_to_make_gbm)
# Calls_to_make is the number of calls you plan to make with this strategy
# Success_calls is 0 if you don't call them OR call and don't make a sale; if you experience success on that call, it represents the call number on which you were successful
# Fail_calls is the number of failed calls for different reasons: 1. you didn't plan to make enough calls, 2. you made calls prior to a success or 3. you made all campaign calls and didn't get a success
# #Predict decisions (max calls to make) for test dataset using lasso
#
# lasso_results <- data.frame(Max_calls_lasso = rep(0,nrow(df_test)), p1_lasso = rep(0,nrow(df_test)), p2_lasso = rep(0,nrow(df_test)), p3_lasso = rep(0,nrow(df_test)), p4_lasso = rep(0,nrow(df_test)), p5_lasso = rep(0,nrow(df_test)))
#
# for (x in 1:nrow(df_test)) {
#   lasso_results[x,] <-Compute_Sample_Profitability_LASSO(x, cv_lasso)
#   }
#
# df_test <- cbind(df_test,lasso_results)
#
# hist(df_test$Max_calls_lasso)
# nrow(df_test[df_test$Max_calls_lasso<df_test$campaign])/nrow(df_test)
# #Predict decisions (max calls to make) for test dataset using ridge
#
# enet_results <- data.frame(Max_calls_enet = rep(0,nrow(df_test)), p1_enet = rep(0,nrow(df_test)), p2_enet = rep(0,nrow(df_test)), p3_enet = rep(0,nrow(df_test)), p4_enet = rep(0,nrow(df_test)), p5_enet = rep(0,nrow(df_test)))
#
# for (x in 1:nrow(df_test)) {
#   enet_results[x,] <-Compute_Sample_Profitability_LASSO(x, cv_enet)
#   }
#
# df_test <- cbind(df_test,enet_results)
#
# hist(df_test$Max_calls_enet)
# nrow(df_test[df_test$Max_calls_enet<df_test$campaign])/nrow(df_test)
# #Predict decisions (max calls to make) for test dataset using ridge
#
# ridge_results <- data.frame(Max_calls_ridge = rep(0,nrow(df_test)), p1_ridge = rep(0,nrow(df_test)), p2_ridge = rep(0,nrow(df_test)), p3_ridge = rep(0,nrow(df_test)), p4_ridge = rep(0,nrow(df_test)), p5_ridge = rep(0,nrow(df_test)))
#
# for (x in 1:nrow(df_test)) {
#   ridge_results[x,] <-Compute_Sample_Profitability_LASSO(x, cv_ridge)
#   }
#
# df_test <- cbind(df_test,ridge_results)
#
# hist(df_test$Max_calls_ridge)
# nrow(df_test[df_test$Max_calls_ridge<df_test$campaign])/nrow(df_test)
# #make decision for logit (employment) model
# logit_results <- data.frame(Max_calls_logit = rep(0,nrow(df_test)), p1_logit = rep(0,nrow(df_test)), p2_logit = rep(0,nrow(df_test)), p3_logit = rep(0,nrow(df_test)), p4_logit = rep(0,nrow(df_test)), p5_logit = rep(0,nrow(df_test)))
#
# suppressWarnings( for (x in 1:nrow(df_test)) {
#   logit_results[x,] <-Compute_Sample_Profitability(x)
#   }
# )
#
# df_test <- cbind(df_test,logit_results)
#
# hist(df_test$Max_calls_logit)
# nrow(df_test[df_test$Max_calls_logit<df_test$campaign])/nrow(df_test)
# save(df_test,file='df_test.rda')
load(file='df_test.rda')
#compute profit of calling all (as called)
baseline_profit <-0
for (x in 1:nrow(df_test)) {
if(df_test$Class[x]=="FALSE") { baseline_profit<-baseline_profit-df_test$campaign[x]*fail_cost
} else { baseline_profit<-baseline_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
baseline_profit
#ridge profit
ridge_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>df_test$Max_calls_ridge[x]){
ridge_profit<-ridge_profit-df_test$Max_calls_ridge[x]*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
ridge_profit<-ridge_profit-df_test$campaign[x]*fail_cost
} else { ridge_profit<-ridge_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
ridge_profit
enet_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>df_test$Max_calls_enet[x]){
enet_profit<-enet_profit-df_test$Max_calls_enet[x]*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
enet_profit<-enet_profit-df_test$campaign[x]*fail_cost
} else { enet_profit<-enet_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
enet_profit
lasso_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>df_test$Max_calls_lasso[x]){
lasso_profit<-lasso_profit-df_test$Max_calls_lasso[x]*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
lasso_profit<-lasso_profit-df_test$campaign[x]*fail_cost
} else { lasso_profit<-lasso_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
lasso_profit
#compute "theoretical best profit" ->targeting only people who say yes
best_profit <-0
for (x in 1:nrow(df_test)) {
if(df_test$Class[x]=="TRUE"){
best_profit<-best_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost
}
}
NROW(df_test[df_test$Class=="TRUE"])
best_profit
#logit profit
logit_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>df_test$Max_calls_logit[x]){
logit_profit<-logit_profit-df_test$Max_calls_logit[x]*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
logit_profit<-logit_profit-df_test$campaign[x]*fail_cost
} else { logit_profit<-logit_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
logit_profit
#Gains
lasso_profit/baseline_profit-1
three_call_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>3){
three_call_profit<-three_call_profit-3*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
three_call_profit<-three_call_profit-df_test$campaign[x]*fail_cost
} else { three_call_profit<-three_call_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
two_call_profit <-0
for (x in 1:nrow(df_test)) {
if  (df_test$campaign[x]>2){
two_call_profit<-two_call_profit-2*fail_cost
} else {
if(df_test$Class[x]=="FALSE"){
two_call_profit<-two_call_profit-df_test$campaign[x]*fail_cost
} else { two_call_profit<-two_call_profit+Success_profit-(df_test$campaign[x]-1)*fail_cost}
}
}
regression_tree_profit <- -fail_cost*sum(fail_calls_tree) + Success_profit*sum(success_calls_tree>0)
rf_profit <- -fail_cost*sum(fail_calls_rf) + Success_profit*sum(success_calls_rf>0)
gbm_profit <- -fail_cost*sum(fail_calls_gbm) + Success_profit*sum(success_calls_gbm>0)
profit_plot <- barplot(c(baseline_profit,two_call_profit,three_call_profit,logit_profit,lasso_profit, gbm_profit), names = c("baseline","two-call","three-call","logit","lasso","gbm"),ylim=c(0,10000), main="Profits by Strategy", xlab="Strategy", ylab="Profit")
text(profit_plot,c(baseline_profit,two_call_profit,three_call_profit,logit_profit,lasso_profit, gbm_profit)+300, labels=format(c(baseline_profit,two_call_profit,three_call_profit,logit_profit,lasso_profit, gbm_profit),digits=0))
model_curve_logit <- data.frame(n = seq(from = .01, to= 1, by = .01), logit_profit = 0)
for (n in 1:nrow(df_test)){
df_test_profit <- df_test[n, current_prob := get(paste0("p",df_test$campaign[n],"_logit"))]
}
df_test_profit[,rank := frank(current_prob)]
df_test_profit <- df_test_profit[order(-rank)]
for (p in seq(from = .01, to= 1, by = .01)){
num<-round(nrow(df_test_profit)*p)
model_curve_logit[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
for (p in c(.06,.07)){
num<-round(nrow(df_test_profit)*p)
model_curve_logit[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
model_curve_lasso <- data.frame(n = seq(from = .01, to= 1, by = .01), lasso_profit = 0)
for (n in 1:nrow(df_test)){
df_test_profit <- df_test[n, current_prob := get(paste0("p",df_test$campaign[n],"_lasso"))]
}
df_test_profit[,rank := frank(current_prob)]
df_test_profit <- df_test_profit[order(-rank)]
for (p in seq(from = .01, to= 1, by = .01)){
num<-round(nrow(df_test_profit)*p)
model_curve_lasso[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
for (p in c(.06,.07)){
num<-round(nrow(df_test_profit)*p)
model_curve_lasso[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
model_curve_gbm <- data.frame(n = seq(from = .01, to= 1, by = .01), gbm_profit = 0)
df_test_profit <- df_test
for (n in 1:nrow(df_test)){
df_test_profit[n,'current_prob'] <- as.numeric(prob_gbm[n,df_test$campaign[n]])
}
df_test_profit <- df_test_profit[,rank := frank(df_test_profit$current_prob)]
df_test_profit <- df_test_profit[order(-rank)]
for (p in seq(from = .01, to= 1, by = .01)){
num<-round(nrow(df_test_profit)*p)
model_curve_gbm[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
for (p in c(.06,.07)){
num<-round(nrow(df_test_profit)*p)
model_curve_gbm[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
model_curve_random <- data.frame(n = seq(from = .01, to= 1, by = .01), random_profit = 0)
random_order <- sample(1:nrow(df_test),size=nrow(df_test),replace=FALSE)
df_test_profit <- df_test[order(random_order)]
for (p in seq(from = .01, to= 1, by = .01)){
num<-round(nrow(df_test_profit)*p)
model_curve_random[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
for (p in c(.06,.07)){
num<-round(nrow(df_test_profit)*p)
model_curve_random[p*100,2] <- df_test_profit[1:num, sum(Class)]*Success_profit - (num-df_test_profit[1:num, sum(Class)])*fail_cost
}
model_curve <- cbind(model_curve_logit,lasso_profit = model_curve_lasso$lasso_profit, gbm_profit = model_curve_gbm$gbm_profit, random_profit = model_curve_random$random_profit)
ggplot(data=model_curve) + geom_line(aes(x=n,y=lasso_profit,col='LASSO')) + geom_line(aes(x=n,y=logit_profit, col = 'Logit')) + geom_line(aes(x=n,y=random_profit, col = 'Random')) + geom_line(aes(x=n,y=gbm_profit, col = 'GBM')) + labs(title="Profit Curve by Percent Targeted", x = "Percent Targeted", y = "Profit", color = "Model")
### Lookalike modeling - kNN. This section uses the same training and testing samples as other modeling approaches. Neighbor votes from 1 to 20 neighbors, as defined by Euclidean distance, are explored.  We also explored using Mahalanobis (i.e., variance-weighted) distances, but the computing power required to do so made implementation impractical. As shown in our slides and executive summary, kNN is not an effective approach at this scale. However, the approach yieled high specificity--but low target rates--at high neighbor counts, suggesting kNN may be appropriate with larger prospect lists, such as those enabled by social media marketing channels.
TrnX <- df_train[,1:30]
OrigTrnG <- df_train$Class
TstX <- df_test[,1:30]
# nnresult <- data.frame("Neighbors" = NULL, "Total_Calls" = NULL, "Good_Calls" = NULL, "Total_Profit" = NULL)
# for (i in 1:20){
#   nn <- knn(TrnX, TstX, OrigTrnG, k=i, l = 0, prob=FALSE, use.all = FALSE)
#   nn <- cbind(nn,df_test[,56])
#
#   nn$call <- 0
#   nn$call[nn$nn==TRUE] <- 1
#
#   nn$match <- nn$nn == nn$Class & nn$Class== TRUE
#   nn$profit <- 0
#   nn$profit[nn$match==TRUE] <- Success_profit
#
#   nn$failcall <- nn$nn == TRUE & nn$Class == FALSE
#   nn$failcost <-0
#   nn$failcost[nn$failcall==TRUE] <- fail_cost
#
#   thisresult <- data.frame("Neighbors" = i ,
#                            "Total_Calls" = sum(nn$call),
#                            "Good_Calls" = length(nn$match[nn$match==TRUE]),
#                            "Total_Profit" = sum(nn$profit) - sum(nn$failcost)
#                            )
#
#
#   nnresult <- rbind(nnresult, thisresult)
# }
# save(nnresult, file="nnresult.rda")
load(file="nnresult.rda")
write.csv(nnresult, "knn_result.csv")
nnresult
